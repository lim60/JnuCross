package com.jnu.jnucross.chains.ethereum.generated;

import io.reactivex.Flowable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.8.
 */
@SuppressWarnings("rawtypes")
public class EvidenceContract extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_ADDSIGNATURES = "addSignatures";

    public static final String FUNC_NEWEVIDENCE = "newEvidence";

    public static final String FUNC_QUERYEVIDENCESTATE = "queryEvidenceState";

    public static final String FUNC_UPDATEEVIDENCE = "updateEvidence";

    public static final Event VALUEEVIDENCE_EVENT = new Event("ValueEvidence", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event VALUENEWEVISIGNATURE_EVENT = new Event("ValueNewEviSignature", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    @Deprecated
    protected EvidenceContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EvidenceContract(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected EvidenceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected EvidenceContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static List<ValueEvidenceEventResponse> getValueEvidenceEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VALUEEVIDENCE_EVENT, transactionReceipt);
        ArrayList<ValueEvidenceEventResponse> responses = new ArrayList<ValueEvidenceEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ValueEvidenceEventResponse typedResponse = new ValueEvidenceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.evidenceIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.state = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.evidenceDigest = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ValueEvidenceEventResponse getValueEvidenceEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VALUEEVIDENCE_EVENT, log);
        ValueEvidenceEventResponse typedResponse = new ValueEvidenceEventResponse();
        typedResponse.log = log;
        typedResponse.evidenceIndex = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.state = (String) eventValues.getNonIndexedValues().get(1).getValue();
        typedResponse.evidenceDigest = (String) eventValues.getNonIndexedValues().get(2).getValue();
        return typedResponse;
    }

    public Flowable<ValueEvidenceEventResponse> valueEvidenceEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getValueEvidenceEventFromLog(log));
    }

    public Flowable<ValueEvidenceEventResponse> valueEvidenceEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALUEEVIDENCE_EVENT));
        return valueEvidenceEventFlowable(filter);
    }

    public static List<ValueNewEviSignatureEventResponse> getValueNewEviSignatureEvents(TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(VALUENEWEVISIGNATURE_EVENT, transactionReceipt);
        ArrayList<ValueNewEviSignatureEventResponse> responses = new ArrayList<ValueNewEviSignatureEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            ValueNewEviSignatureEventResponse typedResponse = new ValueNewEviSignatureEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.signer = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.signature = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static ValueNewEviSignatureEventResponse getValueNewEviSignatureEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(VALUENEWEVISIGNATURE_EVENT, log);
        ValueNewEviSignatureEventResponse typedResponse = new ValueNewEviSignatureEventResponse();
        typedResponse.log = log;
        typedResponse.signer = (String) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.signature = (String) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<ValueNewEviSignatureEventResponse> valueNewEviSignatureEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getValueNewEviSignatureEventFromLog(log));
    }

    public Flowable<ValueNewEviSignatureEventResponse> valueNewEviSignatureEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VALUENEWEVISIGNATURE_EVENT));
        return valueNewEviSignatureEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> addSignatures(BigInteger evidenceIndex, String publicKey, String indiviSignature) {
        final Function function = new Function(
                FUNC_ADDSIGNATURES, 
                Arrays.<Type>asList(new Uint256(evidenceIndex),
                new Utf8String(publicKey),
                new Utf8String(indiviSignature)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> newEvidence(BigInteger orderIndex, String evidenceDigest) {
        final Function function = new Function(
                FUNC_NEWEVIDENCE, 
                Arrays.<Type>asList(new Uint256(orderIndex),
                new Utf8String(evidenceDigest)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> queryEvidenceState(BigInteger evidenceIndex) {
        final Function function = new Function(FUNC_QUERYEVIDENCESTATE, 
                Arrays.<Type>asList(new Uint256(evidenceIndex)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<TransactionReceipt> updateEvidence(BigInteger evidenceIndex, String newState, String evidenceDigest) {
        final Function function = new Function(
                FUNC_UPDATEEVIDENCE, 
                Arrays.<Type>asList(new Uint256(evidenceIndex),
                new Utf8String(newState),
                new Utf8String(evidenceDigest)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static EvidenceContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EvidenceContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static EvidenceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EvidenceContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static EvidenceContract load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new EvidenceContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static EvidenceContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new EvidenceContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<EvidenceContract> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EvidenceContract.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EvidenceContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EvidenceContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<EvidenceContract> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(EvidenceContract.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<EvidenceContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EvidenceContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ValueEvidenceEventResponse extends BaseEventResponse {
        public BigInteger evidenceIndex;

        public String state;

        public String evidenceDigest;
    }

    public static class ValueNewEviSignatureEventResponse extends BaseEventResponse {
        public String signer;

        public String signature;
    }


}
