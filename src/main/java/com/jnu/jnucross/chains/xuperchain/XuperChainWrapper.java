package com.jnu.jnucross.chains.xuperchain;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.jnu.jnucross.chains.*;
import com.jnu.jnucross.chains.xuperchain.xuper.api.Account;
import com.jnu.jnucross.chains.xuperchain.xuper.api.XuperClient;
import com.jnu.jnucross.chains.xuperchain.xuper.crypto.xchain.sign.ECKeyPair;
import com.jnu.jnucross.chains.xuperchain.xuper.pb.XchainOuterClass;
import org.web3j.protocol.core.DefaultBlockParameter;


import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * @author SDKany
 * @ClassName XuperChainWrapper
 * @Date 2023/8/18 22:47
 * @Version V1.0
 * @Description
 */
public class XuperChainWrapper extends ChainWrapper {
    String xuperChain_url; // = "http://10.154.24.12:8545";
    XuperClient client;// = Web3j.build(new HttpService(geth_url));
    Account account;//  = null;
    static ObjectMapper objectMapper = new ObjectMapper();

    public XuperChainWrapper(){
        super();
    }

    public XuperChainWrapper(String url, BigInteger privateKey){
        xuperChain_url = url;
        client = new XuperClient(xuperChain_url);
        ECKeyPair ecKeyPair = ECKeyPair.create(privateKey);
        account = Account.create(ecKeyPair);
    }

    public XuperChainWrapper(String url, String hexPrivateKeyString){
        xuperChain_url = url;
        client = new XuperClient(xuperChain_url);
        ECKeyPair ecKeyPair = ECKeyPair.create(Numeric.toBigInt(hexPrivateKeyString));
        account = Account.create(ecKeyPair);
    }

    public static XuperChainWrapper build(){
        XuperChainWrapper xuperChainWrapper = new XuperChainWrapper();
        xuperChainWrapper.xuperChain_url = "10.154.24.12:37101";
        xuperChainWrapper.client = new XuperClient(xuperChainWrapper.xuperChain_url);
        ECKeyPair ecKeyPair = ECKeyPair.create(new BigInteger("111497060296999106528800133634901141644446751975433315540300236500052690483486"));
        xuperChainWrapper.account = Account.create(ecKeyPair);
        return xuperChainWrapper;
    }

    @Override
    public void setChain(String url){
        client = new XuperClient(url);
    }

    @Override
    public void setAccount(String hexPrivateKeyString){
        ECKeyPair ecKeyPair = ECKeyPair.create(Numeric.toBigInt(hexPrivateKeyString));
        account = Account.create(ecKeyPair);
    }

    @Override
    public void setAccount(BigInteger privateKey){
        ECKeyPair ecKeyPair = ECKeyPair.create(privateKey);
        account = Account.create(ecKeyPair);
    }

    public static void main(String[] args) {
        ChainWrapper chainWrapper = XuperChainWrapper.build();

        System.out.println("BlockNumber = " + chainWrapper.getBlockNumber()); // 获取块高
        System.out.println("----------------------------------");
        System.out.println("The 1st block is = " + chainWrapper.getBlockByNumber(2)); // 通过块高获取块
        System.out.println("----------------------------------");
        // 通过hash获取块
        System.out.println("The block with hash 2a11f1aebb9c3ff173bbe8e1cdbf679ce72b5ca35aed50f99d3a4f6b90670d61 is = " + chainWrapper.getBlockByHash("2a11f1aebb9c3ff173bbe8e1cdbf679ce72b5ca35aed50f99d3a4f6b90670d61"));
        System.out.println("----------------------------------");
//        // 获取transaction by hash
        System.out.println("Get Transaction by hash = " + chainWrapper.getTransaction("5939f2423d45b7512d9af6ac9f56553b21d5d03f0057da407f1133dbdc4a8c86"));
        System.out.println("----------------------------------");

        //RawTransaction rawTransaction = new RawTransaction();
        //client.stop();

//        String abi = "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"participatingSigners\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"addSignatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceIndex\",\"type\":\"uint256\"}],\"name\":\"getSigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceIndex\",\"type\":\"uint256\"}],\"name\":\"getSignersSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"evidenceDigest\",\"type\":\"string\"}],\"name\":\"newEvidence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceIndex\",\"type\":\"uint256\"}],\"name\":\"queryEvidenceState\",\"outputs\":[{\"internalType\":\"enumEvidenceContract.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"evidenceIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newState\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"evidenceDigest\",\"type\":\"string\"}],\"name\":\"updateEvidence\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]";
//        String bin = "";
//        String contractName = "EvidenceContract";
//        Map<String, String> arg = new HashMap<>();
//        arg.put("address", "[TeyyPLpp9L7QAcxHangtcHTu7HUZ6iydY]");
//        try {
//           ((XuperChainWrapper) chainWapper).account.setContractAccount("XC1234567890123258@xuper");
//           System.out.println("Contract Address : " + ((XuperChainWrapper) chainWapper).deployContract(bin, abi, contractName, arg));
//        }catch (Exception e){
//            e.printStackTrace();
//        }
        System.exit(0);

    }

    @Override
    public BigInteger getBalance(){
        try {
            return client.getBalance(account.getAddress());
        } catch (Exception e) {
            e.printStackTrace();
            return BigInteger.valueOf(0);
        }
    }

    @Override
    public long getBlockNumber() {
        return client.getHeight();
    }

    @Override
    public Block getBlockByNumber(long blockNumber) {
        XchainOuterClass.InternalBlock xuperBlock = client.queryBlockByHeight(blockNumber);
        if (xuperBlock == null)
            return new Block();
        return covertToBlock(xuperBlock);
    }

    @Override
    public Block getBlockByHash(String blockHash) {
        XchainOuterClass.InternalBlock xuperBlock = client.queryBlock(blockHash);
        if (xuperBlock == null)
            return new Block();
        return covertToBlock(xuperBlock);
    }

    @Override
    public Transaction getTransaction(String transactionHash) {
        XchainOuterClass.Transaction xuperChainTransaction = client.queryTx(transactionHash);
        if(xuperChainTransaction == null)
            return new Transaction();
        return coverToTransaction(xuperChainTransaction);
    }

//    public String deployContract(String bin, String abi, String contractName, Map<String, String> args){
//        com.jnu.jnucross.chains.xuperchain.xuper.api.Transaction t = client.deployEVMContract(account, bin.getBytes(), abi.getBytes(), contractName, args);
//        return t.getTxid();
//    }

    public Transaction transfer(String to, BigInteger amount){
        com.jnu.jnucross.chains.xuperchain.xuper.api.Transaction t =  client.transfer(account, to, amount, "1");
        return coverToTransaction(t.getRawTx());
    }

    // query不会发生交易，只请求合约上的函数
    public Transaction query(String contractName, String method, Map<String, String> args){
        com.jnu.jnucross.chains.xuperchain.xuper.api.Transaction t = client.queryEVMContract(account, contractName, method, args);;
        return coverToTransaction(t.getRawTx());
    }

    // invoke会产生交易
    public Transaction invoke(String contractName, String method, Map<String, String> args, BigInteger amount){
        com.jnu.jnucross.chains.xuperchain.xuper.api.Transaction t = client.invokeEVMContract(account, contractName, method, args, amount);
        return coverToTransaction(t.getRawTx());
    }

    public static Block covertToBlock(XchainOuterClass.InternalBlock xuperBlock){
        Block block = new Block();
        BlockHeader blockHeader = new BlockHeader();
        blockHeader.setNumber(xuperBlock.getHeight());
        blockHeader.setHash(Numeric.toHexStringNoPrefix(xuperBlock.getBlockid().toByteArray()));
        blockHeader.setPrevHash(Numeric.toHexStringNoPrefix(xuperBlock.getPreHash().toByteArray()));
        blockHeader.setReceiptRoot(Numeric.toHexStringNoPrefix(xuperBlock.getMerkleRoot().toByteArray()));
        blockHeader.setTransactionRoot(""); // xuper chain block似乎不存在这样的数据
        blockHeader.setStateRoot(""); // xuper chain block似乎不存在这样的数据
        block.setBlockHeader(blockHeader);
        block.setChainType(EnumType.ChainType.XuperChain);
        List<XchainOuterClass.Transaction> transactionResults = xuperBlock.getTransactionsList();
        List<String> transactionsHashes = new ArrayList<>();
        for (XchainOuterClass.Transaction transaction : transactionResults) {
            transactionsHashes.add(Numeric.toHexStringNoPrefix(transaction.getTxid().toByteArray()));
        }
        block.setTransactionsHashes(transactionsHashes);
        try {
            byte[] bytes = objectMapper.writeValueAsBytes(block);
            block.setRawBytes(bytes);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            block.setRawBytes(new byte[0]);
        }
        return block;
    }

    public static Transaction coverToTransaction(XchainOuterClass.Transaction xuperChainTransaction){
        Transaction transaction = new Transaction();
        transaction.setFrom(xuperChainTransaction.getInitiator());
        try {
            transaction.setTo(Numeric.toHexStringNoPrefix(xuperChainTransaction.getTxOutputs(0).getToAddr().toByteArray()));
        }catch (Exception e){
            transaction.setTo("");
            e.printStackTrace();
        }
        transaction.setHash(Numeric.toHexStringNoPrefix(xuperChainTransaction.getTxid().toByteArray()));
        transaction.setBlockNumber(Numeric.toBigInt(xuperChainTransaction.getBlockid().toByteArray()).longValue());
        try {
            transaction.setRawBytes(xuperChainTransaction.toByteArray());
        } catch (Exception e) {
            e.printStackTrace();
            transaction.setRawBytes(new byte[0]);
        }
        transaction.setChainType(EnumType.ChainType.XuperChain);
        return transaction;
    }
}
